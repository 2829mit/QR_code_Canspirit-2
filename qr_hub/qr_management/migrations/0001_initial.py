# Generated by Django 5.1.4 on 2025-01-07 18:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('qr_quota', models.IntegerField(default=10, help_text='The maximum number of QR codes the user can create.')),
                ('qr_codes_created', models.PositiveIntegerField(default=0, help_text='The number of QR codes the user has created.')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('organization', models.ForeignKey(blank=True, help_text='The organization to which the user belongs.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='members', to='qr_management.organization')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='QRCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qr_type', models.CharField(choices=[('email', 'Email'), ('geo', 'Geo Location'), ('generic', 'Generic'), ('mecard', 'MeCard'), ('vcard', 'VCard'), ('wifi', 'WiFi')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('organization', models.ForeignKey(blank=True, help_text='The organization associated with this QR code.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='qr_codes', to='qr_management.organization')),
                ('user', models.ForeignKey(help_text='The user who created this QR code.', on_delete=django.db.models.deletion.CASCADE, related_name='qrcodes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='QREmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient', models.CharField(max_length=100)),
                ('subject', models.CharField(max_length=255)),
                ('body', models.TextField()),
                ('qr_code', models.OneToOneField(help_text='Related QR code for email type.', on_delete=django.db.models.deletion.CASCADE, related_name='email_details', to='qr_management.qrcode')),
            ],
        ),
        migrations.CreateModel(
            name='QRGeneric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(blank=True, max_length=2083, null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('qr_code', models.OneToOneField(help_text='Related QR code for generic type.', on_delete=django.db.models.deletion.CASCADE, related_name='generic_details', to='qr_management.qrcode')),
            ],
        ),
        migrations.CreateModel(
            name='QRGeo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('qr_code', models.OneToOneField(help_text='Related QR code for geo-location type.', on_delete=django.db.models.deletion.CASCADE, related_name='geo_details', to='qr_management.qrcode')),
            ],
        ),
        migrations.CreateModel(
            name='QRMeCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=100)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('organization', models.CharField(blank=True, max_length=100, null=True)),
                ('qr_code', models.OneToOneField(help_text='Related QR code for MeCard type.', on_delete=django.db.models.deletion.CASCADE, related_name='mecard_details', to='qr_management.qrcode')),
            ],
        ),
        migrations.CreateModel(
            name='QRVCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('displayname', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=100)),
                ('address', models.CharField(max_length=255)),
                ('organization', models.CharField(max_length=100)),
                ('qr_code', models.OneToOneField(help_text='Related QR code for vCard type.', on_delete=django.db.models.deletion.CASCADE, related_name='vcard_details', to='qr_management.qrcode')),
            ],
        ),
        migrations.CreateModel(
            name='QRWiFi',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ssid', models.CharField(max_length=100)),
                ('password', models.CharField(blank=True, max_length=100, null=True)),
                ('security', models.CharField(choices=[('WEP', 'WEP'), ('WPA', 'WPA'), ('WPA2', 'WPA2'), ('None', 'None')], max_length=10)),
                ('qr_code', models.OneToOneField(help_text='Related QR code for WiFi type.', on_delete=django.db.models.deletion.CASCADE, related_name='wifi_details', to='qr_management.qrcode')),
            ],
        ),
    ]
